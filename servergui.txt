using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;
using System.Text;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Threading;
using System.Security.Cryptography;

namespace servergui
{
    public partial class Form1 : Form
    {
        string userstring;
        public Form1()
        {
            InitializeComponent();
        }
        private void textBox1_TextChanged(object sender, EventArgs e){}
        private void textBox3_TextChanged(object sender, EventArgs e) { }
        private void label1_Click(object sender, EventArgs e){}
        private void Form1_Load(object sender, EventArgs e) 
        {

            
        }
        private void textBox3_Enter(object sender, EventArgs e)
        {
            userstring = textBox3.Text;
        }
        private void textBox2_TextChanged(object sender, EventArgs e) { }
        private void radioButton2_CheckedChanged(object sender, EventArgs e) { Application.Exit(); }
        private void radioButton1_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                ThreadedTcpSrvr();
            }
            catch (Exception r)
            {
                textBox2.Text = "ERROR :" + r;
            }
        }
        public void ThreadedTcpSrvr()
        {

            Thread serverThread = new Thread(new ThreadStart(serverThreadStart));
            serverThread.Start();
        }

        private void serverThreadStart() 
        {
            //textBox3.Text = "enter message";
            textBox1.Text = "172.16.195.101";
            userstring = textBox3.Text;
            if (userstring.Length == 0) userstring = "data sent";
            IPAddress ipAd = IPAddress.Parse("172.16.195.101");
            TcpListener client = new TcpListener(ipAd, 9050);
            client.Start();
            while (true)   
            {

                while (!client.Pending())
                {
                   Thread.Sleep(1000);
                    continue;
                }
                connectionthread Cth = new connectionthread();
                Cth.threadListener = client;
                //Cth.t = textBox2;
                Cth.original = userstring;
                Thread newthread = new Thread(new ThreadStart(Cth.handleConnection));
                newthread.Start();


            }
        }


    }
    public class connectionthread 
    {
        //public TextBox t;
        public string original;
        public byte[] EncryptStringToBytes(string plainText, byte[] Key, byte[] IV)
        {
            // Check arguments. 
            if (plainText == null || plainText.Length <= 0)
                throw new ArgumentNullException("plainText");
            if (Key == null || Key.Length <= 0)
                throw new ArgumentNullException("Key");
            if (IV == null || IV.Length <= 0)
                throw new ArgumentNullException("IV");
            byte[] encrypted;
            // Create an RijndaelManaged object 
            // with the specified key and IV. 
            using (RijndaelManaged rijAlg = new RijndaelManaged())
            {
                rijAlg.Key = Key;
                rijAlg.IV = IV;

                // Create a decryptor to perform the stream transform.
                ICryptoTransform encryptor = rijAlg.CreateEncryptor(rijAlg.Key, rijAlg.IV);

                // Create the streams used for encryption. 
                using (MemoryStream msEncrypt = new MemoryStream())
                {
                    using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                    {
                        using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
                        {

                            //Write all data to the stream.
                            swEncrypt.Write(plainText);
                        }
                        encrypted = msEncrypt.ToArray();
                    }
                }
            }


            // Return the encrypted bytes from the memory stream. 
            return encrypted;

        }
        public string DecryptStringFromBytes(byte[] cipherText, byte[] Key, byte[] IV)
        {
            // Check arguments. 
            if (cipherText == null || cipherText.Length <= 0)
                throw new ArgumentNullException("cipherText");
            if (Key == null || Key.Length <= 0)
                throw new ArgumentNullException("Key");
            if (IV == null || IV.Length <= 0)
                throw new ArgumentNullException("IV");

            // Declare the string used to hold 
            // the decrypted text. 
            string plaintext = null;

            // Create an RijndaelManaged object 
            // with the specified key and IV. 
            using (RijndaelManaged rijAlg = new RijndaelManaged())
            {
                rijAlg.Key = Key;
                rijAlg.IV = IV;

                // Create a decrytor to perform the stream transform.
                ICryptoTransform decryptor = rijAlg.CreateDecryptor(rijAlg.Key, rijAlg.IV);

                // Create the streams used for decryption. 
                using (MemoryStream msDecrypt = new MemoryStream(cipherText))
                {
                    using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
                    {
                        using (StreamReader srDecrypt = new StreamReader(csDecrypt))
                        {

                            // Read the decrypted bytes from the decrypting stream 
                            // and place them in a string.
                            plaintext = srDecrypt.ReadToEnd();
                        }
                    }
                }

            }

            return plaintext;

        }
        public TcpListener threadListener;
        public void handleConnection()
        {

            //int connections = 0;
            byte[] data = new byte[100];
            TcpClient client = threadListener.AcceptTcpClient();
            NetworkStream ns = client.GetStream();
            //connections++;
           // t.Text="New client accepted: {0} active connections";
            Socket s = client.Client;
            //t.Text = "I am connected to " + IPAddress.Parse(((IPEndPoint)s.RemoteEndPoint).Address.ToString()) + "on port number " + ((IPEndPoint)s.RemoteEndPoint).Port.ToString();
            
        // original = "aaa karo naa";
            byte[] ol = BitConverter.GetBytes(original.Length);
            int i__ = BitConverter.ToInt32(ol, 0);
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            RijndaelManaged myRijndael = new RijndaelManaged();
            byte[] iv_ = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F };
            byte[] key_ = new byte[] { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF };

            byte[] encrypted = EncryptStringToBytes(original, key_, iv_);
            string roundtrip = DecryptStringFromBytes(encrypted, key_, iv_);
            string ciphertext = System.Text.Encoding.UTF8.GetString(encrypted);
            /////////////////////////////////////////////////////////////////////////////////////
            //string welcome = "SERVER: decrypt the cipher ";
            //byte[] servermessage = Encoding.ASCII.GetBytes(welcome);
            byte[] joinnsend = new byte[encrypted.Length + ol.Length];
            ol.CopyTo(joinnsend, 0);
            encrypted.CopyTo(joinnsend, ol.Length);
            ns.Write(joinnsend, 0, joinnsend.Length);               //27 bytes
            //ns.Write(encrypted, 0, encrypted.Length);           //16 bytes
            ns.Close();
            client.Close();
            int id = Thread.GetDomainID();
            //connections--;

        }
    }
    

} //end of namespace
